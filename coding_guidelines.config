-Design Patterns:
1. Verify that the design patterns like Singleton, Factory, Builder, Strategy and Repository are used where appropriate. If not used, suggest how to refactor the code to follow the specific design pattern(s).
2. Also, check if the code follows SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion). If not used, suggest how to refactor the code to follow these principles.
-Java Coding Guidelines:
1.Naming Conventions:
a.Class names should be nouns and start with an uppercase letter (e.g., Car, UserService).
b.Method and variable names should be verbs or nouns and start with a lowercase letter (e.g., getUser(), firstName).
c.Constants should be all uppercase with underscores separating words (e.g., MAX_SIZE).
2.Indentation and Formatting:
a.Use 4 spaces for indentation.
b.Use braces even for single-line statements in control structures.
c.Limit lines to 80-120 characters to improve readability.
3.Comments and Documentation:
a.Verify that the Javadoc style comments are used for documenting classes, methods, and fields.
b.Write clear and concise comments to explain complex algorithms or business logic.
4.Exception Handling:
a.Use specific exception types rather than catching Exception.
b.Handle exceptions appropriately, either by logging or throwing further up the call stack.
5.Avoid Magic Numbers and Strings:
a.Verify constants are used instead of hardcoding values.
b.Verify that strings and numbers are defined as constants at the beginning of the class.
6.Immutable Objects:
a.Prefer immutability whenever possible.
b. Verify to make fields final if they should not change after object creation.
7.Use Interfaces and Abstract Classes:
a.Verify the use of interfaces for defining contracts and abstract classes for code reuse.
b.Prefer composition over inheritance.
8.Concurrency:
a.Use thread-safe classes and synchronization mechanisms when dealing with concurrent operations.
b.Utilize Java's concurrent utilities like ExecutorService and ConcurrentHashMap.
-Spring Boot Coding Guidelines:
1.Project Structure:
a.Organize classes into packages based on their functionality.
b.Follow the standard Maven or Gradle project structure.
2.Dependency Injection:
a.Verify the use of constructor injection wherever possible for better testability and immutability.
b.Avoid field injection, prefer setter injection only when required.
3.RESTful APIs:
a. Verify the RESTful principles are followed for designing APIs.
b. Validate the use of appropriate HTTP methods (GET, POST, PUT, DELETE) for CRUD operations.
4.Exception Handling:
a.Verify that @ControllerAdvice is used for global exception handling.
b.Customize error responses using @ExceptionHandler.
5.Security:
a. Verify that the best practices for password hashing and session management are used.
6.Testing:
a.Write unit tests for business logic using frameworks like JUnit and Mockito.
b.Use Spring Boot's testing annotations (@SpringBootTest, @WebMvcTest, etc.) for integration testing.
7.Logging:
a.Use a logging framework like Log4j or Logback.
b.Log meaningful messages with appropriate log levels.
8.Performance:
a.Verify that the database queries are optimized using Spring Data JPA's query methods or custom queries.
b.Cache data using Spring's caching abstraction (@Cacheable, @CacheEvict).
9.Documentation:
a.Document API endpoints using Swagger or Spring REST Docs.
b.Include clear descriptions, request/response examples, and error handling details.
10.External Configurations:
a.Externalize configuration using application properties or YAML files.
b.Avoid hardcoding environment-specific values.
